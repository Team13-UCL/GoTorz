@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Threading.Tasks
@using System.Collections.Generic
@using System.Threading
@using Microsoft.AspNetCore.Components.Authorization
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider

<!-- Minimal chat button (when minimized) -->
<div class="chat-button @(isMinimized ? "visible" : "hidden")" @onclick="ToggleMinimized">
    <i class="chat-icon">💬</i>
    @if (unreadMessageCount > 0)
    {
        <span class="notification-badge">@(unreadMessageCount > 9 ? "9+" : unreadMessageCount.ToString())</span>
    }
</div>

<!-- Full chat container -->
<div class="chat-container @(isMinimized ? "hidden" : "visible")">
    <div class="chat-header">
        <h3>Global Chat</h3>
        <div class="chat-controls">
            <button class="minimize-button" @onclick="ToggleMinimized">_</button>
        </div>
    </div>

    <div class="chat-messages" id="messagesList" @onscroll="HandleScroll">
        @foreach (var msg in messages)
        {
            <div class="message-item @(msg.IsCurrentUser ? "message-mine" : "message-other")">
                <div class="message-info">
                    <span class="message-user">@msg.User</span>
                    <span class="message-time">@msg.Timestamp.ToLocalTime().ToString("HH:mm")</span>
                </div>
                <div class="message-content">@msg.Text</div>
            </div>
        }
    </div>

    <div class="chat-input">
        <input @bind="messageInput"
               @bind:event="oninput"
               @onkeydown="HandleKeyDown"
               placeholder="Type a message..."
               disabled="@(!IsConnected)" />
        <button @onclick="SendMessage" disabled="@(!IsConnected || string.IsNullOrWhiteSpace(messageInput))">
            Send
        </button>
    </div>

    <div class="connection-status @(IsConnected ? "connected" : "disconnected")">
        @if (IsConnected)
        {
            <span>Connected</span>
        }
        else
        {
            <span>Disconnected</span>
            <button @onclick="ConnectAsync">Reconnect</button>
        }
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<ChatMessage> messages = new List<ChatMessage>();
    private string messageInput = string.Empty;
    private string currentUser = string.Empty;
    private bool isScrolledToBottom = true;
    private bool isMinimized = true; // Start minimized
    private int unreadMessageCount = 0;
    private bool isUserActive = false;
    private System.Threading.Timer? inactivityTimer;

    protected override async Task OnInitializedAsync()
    {
        // Hent brugerens navn fra authentication state
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Prøv at finde brugerens navn fra claims
            var nameClaim = user.FindFirst("name") ?? user.FindFirst(System.Security.Claims.ClaimTypes.Name);
            if (nameClaim != null)
            {
                currentUser = nameClaim.Value;
            }
            else
            {
                // Hvis vi ikke kan finde et navn, brug email eller andet ID
                currentUser = user.Identity.Name ?? "Authenticated_User";
            }
        }

        // Hvis der stadig ikke er et navn, så brug Guest som fallback
        if (string.IsNullOrEmpty(currentUser))
        {
            currentUser = "Guest_" + Guid.NewGuid().ToString().Substring(0, 4);
        }

        await ConnectAsync();

        // Setup inactivity timer (5 min)
        inactivityTimer = new System.Threading.Timer(async _ =>
        {
            isUserActive = false;
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromMinutes(5), TimeSpan.FromMinutes(5));
    }

    private async Task ConnectAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, string, DateTime>("ReceiveMessage", async (user, message, timestamp) =>
        {
            var isCurrentUser = user == currentUser;
            messages.Add(new ChatMessage { User = user, Text = message, Timestamp = timestamp, IsCurrentUser = isCurrentUser });

            // Hvis chatten er minimeret og beskeden er fra en anden bruger, increment unread count
            if (isMinimized && !isCurrentUser)
            {
                unreadMessageCount++;
            }

            // Brug InvokeAsync for at sikre UI-opdateringer sker på UI tråden
            await InvokeAsync(() =>
            {
                StateHasChanged();
                ScrollToBottom();
            });
        });

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine($"Connected to chat hub as: {currentUser}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to hub: {ex.Message}");
        }
    }

    private async Task SendMessage()
    {
        if (hubConnection is not null && IsConnected && !string.IsNullOrWhiteSpace(messageInput))
        {
            try
            {
                // Send det aktuelle brugernavn sammen med beskeden
                await hubConnection.SendAsync("SendMessage", messageInput, currentUser);
                messageInput = string.Empty;
                isUserActive = true; // Reset inactivity timer
                if (inactivityTimer != null)
                {
                    inactivityTimer.Change(TimeSpan.FromMinutes(5), TimeSpan.FromMinutes(5));
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending message: {ex.Message}");
            }
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private void ToggleMinimized()
    {
        isMinimized = !isMinimized;

        // Hvis chatten åbnes, nulstil ulæste beskeder
        if (!isMinimized)
        {
            unreadMessageCount = 0;
        }
    }

    private void HandleScroll(EventArgs args)
    {
        // Check om brugeren har scrollet op (vi kunne være mere præcise her)
        isScrolledToBottom = false;

        // En mere præcis måde ville være at bruge JS Interop til at tjekke scroll position
    }

    private async Task ScrollToBottom()
    {
        if (isScrolledToBottom && !isMinimized)
        {
            await Task.Delay(50); // Give time for the UI to update
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "messagesList");
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }

        inactivityTimer?.Dispose();
    }

    private class ChatMessage
    {
        public string User { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
        public DateTime Timestamp { get; set; }
        public bool IsCurrentUser { get; set; }
    }
}

<style>
    /* Positionering af chat i nederste højre hjørne */
    .chat-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        display: flex;
        flex-direction: column;
        height: 400px;
        width: 350px;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        background-color: white;
        z-index: 999;
        transition: all 0.3s ease;
    }

    .chat-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background-color: #0d6efd;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        box-shadow: 0 4px 10px rgba(0,0,0,0.2);
        z-index: 999;
        transition: all 0.3s ease;
    }

        .chat-button:hover {
            transform: scale(1.05);
        }

    .chat-icon {
        font-size: 24px;
        color: white;
    }

    .notification-badge {
        position: absolute;
        top: 0;
        right: 0;
        background-color: #dc3545;
        color: white;
        border-radius: 50%;
        width: 22px;
        height: 22px;
        font-size: 12px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .hidden {
        display: none;
    }

    .visible {
        display: flex;
    }

    .chat-header {
        background-color: #0d6efd;
        color: white;
        padding: 10px 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: move; /* Indikerer at vinduet kan flyttes (selvom vi ikke implementerer denne funktion) */
    }

    .chat-controls {
        display: flex;
        gap: 10px;
    }

    .minimize-button {
        background: none;
        border: none;
        color: white;
        font-size: 18px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 25px;
        height: 25px;
        padding: 0;
    }

    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px 15px;
        display: flex;
        flex-direction: column;
        gap: 10px;
        background-color: #f9f9f9;
    }

    .message-item {
        max-width: 80%;
        padding: 8px 12px;
        border-radius: 15px;
        margin-bottom: 5px;
        word-break: break-word;
    }

    .message-mine {
        align-self: flex-end;
        background-color: #d1e7ff;
        border-bottom-right-radius: 5px;
    }

    .message-other {
        align-self: flex-start;
        background-color: #e9e9e9;
        border-bottom-left-radius: 5px;
    }

    .message-info {
        display: flex;
        justify-content: space-between;
        margin-bottom: 2px;
        font-size: 0.8rem;
    }

    .message-user {
        font-weight: bold;
    }

    .message-time {
        color: #666;
    }

    .chat-input {
        display: flex;
        padding: 10px 15px;
        background-color: white;
        border-top: 1px solid #eee;
    }

        .chat-input input {
            flex-grow: 1;
            padding: 8px 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            margin-right: 10px;
            outline: none;
        }

            .chat-input input:focus {
                border-color: #0d6efd;
            }

        .chat-input button {
            padding: 8px 15px;
            background-color: #0d6efd;
            color: white;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-weight: bold;
        }

            .chat-input button:disabled {
                background-color: #cccccc;
                cursor: not-allowed;
            }

    .connection-status {
        padding: 5px 10px;
        text-align: center;
        font-size: 0.8rem;
    }

    .connected {
        background-color: #d4edda;
        color: #155724;
    }

    .disconnected {
        background-color: #f8d7da;
        color: #721c24;
    }
</style>