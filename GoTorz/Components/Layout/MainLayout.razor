@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inherits LayoutComponentBase
@inject AuthenticationStateProvider auth

<nav class="navbar navbar-expand-lg shadow" style="background-color: #1C1C1C; border-radius: 0 0 15px 15px;">
    <div class="container-fluid">
        <a class="navbar-brand fw-bold text-white" href="/">GoTorz</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <NavLink class="nav-link text-white" href="/">Home</NavLink>
                </li>
@*                 <li class="nav-item">
                    <NavLink class="nav-link" href="/Register">Register</NavLink>
                </li> *@
                <li class="nav-item">
                    <NavLink class="nav-link text-white" href="/Login">Login</NavLink>
                </li>

@*                 <li class="nav-item">
                    <NavLink class="nav-link" href="/BrugTilSenere">BrugTilSenere</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/BrugTilSenere">BrugTilSenere</NavLink>
                </li> *@
            </ul>
            <CascadingAuthenticationState>
                <AuthorizeView>
                    <div class="d-flex align-items-center text-white">
                        Hello @email (@role) &nbsp; <a class="btn btn-outline-light btn-sm" href="/logout">Logout</a>
                    </div>
                </AuthorizeView>
            </CascadingAuthenticationState>
        </div>
    </div>
</nav>

<main class="container mt-4">
    @Body
</main>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    public string email { get; set; } = "";
    public string role { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var state = await auth.GetAuthenticationStateAsync();
        var user = state.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            email = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Name)?.Value ?? "";
            role = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value ?? "";
        }
    }
}
