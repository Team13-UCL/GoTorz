@inject HttpClient Http
@inject ILogger<SalesHotelPage> Logger
@page "/SalesHotelPage"
@inject AmadeusAuthService AmadeusService
@using System.Text.Json.Serialization;
@using System.Text.Json
@using GoTorz.Model
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject GoTorz.Data.GoTorzContext DbContext

<h3>Search Hotels</h3>

@if (string.IsNullOrEmpty(AccessToken))
{
    <p>Fetching access token...</p>
}
else
{
    <div class="search-form">
        <div class="form-group">
            <label>City Code:</label>
            <input @bind="CityCode" placeholder="e.g. NYC" class="form-control" />
        </div>

        <div class="form-group">
            <label>Check-in Date:</label>
            <input type="date" @bind="CheckInDate" class="form-control" />
        </div>

        <div class="form-group">
            <label>Check-out Date:</label>
            <input type="date" @bind="CheckOutDate" class="form-control" />
        </div>

        <div class="form-group">
            <label>Adults:</label>
            <input type="number" @bind="Adults" min="1" max="9" class="form-control" />
        </div>

        <button @onclick="FetchHotelsWithPricing" class="btn btn-primary">Search Hotels</button>
    </div>

    @if (IsLoading)
    {
        <p>Loading...</p>
    }
    else if (HotelOffers != null && HotelOffers.Count > 0)
    {
        <h4>Hotel Results:</h4>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Hotel Name</th>
                    <th>City Code</th>
                    <th>Price</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var hotelOffer in HotelOffers)
                {
                    <tr>
                        <td>@hotelOffer.Hotel.Name</td>
                        <td>@hotelOffer.Hotel.CityCode</td>
                        <td>
                            @if (hotelOffer.Offers != null && hotelOffer.Offers.Count > 0)
                            {
                                @($"{hotelOffer.Offers[0].Price.Total} {hotelOffer.Offers[0].Price.Currency}")
                            }
                            else
                            {
                                <span>No price available</span>
                            }
                        </td>
                        <td>
                            <button @onclick="() => SelectHotelOffer(hotelOffer)" class="btn btn-sm btn-info">Select</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p style="color: red;">@ErrorMessage</p>
    }

    @if (SelectedHotel != null)
    {
        <div class="selected-offer">
            <h4>Selected Hotel</h4>
            <div class="card">
                <div class="card-header">
                    <h5>@SelectedHotel.Hotel.Name</h5>
                </div>
                <div class="card-body">
                    <p><strong>Dates:</strong> @CheckInDate?.ToString("yyyy-MM-dd") to @CheckOutDate?.ToString("yyyy-MM-dd")</p>
                    <p><strong>Room Options:</strong></p>

                    <table class="table">
                        <thead>
                            <tr>
                                <th>Room Type</th>
                                <th>Price</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var offer in SelectedHotel.Offers)
                            {
                                <tr>
                                    <td>@(offer.Room?.TypeEstimated?.Category ?? "Standard")</td>
                                    <td>@offer.Price.Total @offer.Price.Currency</td>
                                    <td>
                                        <button @onclick="() => SelectRoom(offer, SelectedHotel.Hotel.Name, offer.Price.Total)" class="btn btn-sm btn-success">Book</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    @if (SelectedOffer != null)
    {
        <div class="booking-summary">
            <h4>Booking Summary</h4>
            <div class="card">
                <div class="card-header">
                    <h5>@SelectedHotel.Hotel.Name</h5>
                </div>
                <div class="card-body">
                    <p><strong>Dates:</strong> @CheckInDate?.ToString("yyyy-MM-dd") to @CheckOutDate?.ToString("yyyy-MM-dd")</p>
                    <p><strong>Room Type:</strong> @(SelectedOffer.Room?.TypeEstimated?.Category ?? "Standard")</p>
                    <p><strong>Price:</strong> @SelectedOffer.Price.Total @SelectedOffer.Price.Currency</p>
                    <p><strong>Description:</strong> @(SelectedOffer.Room?.Description?.Text ?? "No description available")</p>
                    <button class="btn btn-success">Confirm Booking</button>
                </div>
            </div>
        </div>
    }
}

<style>
    .search-form {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #f9f9f9;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .btn {
        display: block;
        width: 100%;
        padding: 10px;
        border: none;
        border-radius: 5px;
        background-color: #007bff;
        color: white;
        font-size: 16px;
        cursor: pointer;
    }

        .btn:hover {
            background-color: #0056b3;
        }

    .btn-sm {
        width: auto;
        padding: 5px 10px;
        font-size: 14px;
    }

    .btn-info {
        background-color: #17a2b8;
    }

        .btn-info:hover {
            background-color: #138496;
        }

    .btn-success {
        background-color: #28a745;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    .table {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 10px;
            border: 1px solid #ddd;
        }

        .table th {
            background-color: #f2f2f2;
        }

    .selected-offer, .booking-summary {
        margin-top: 30px;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 10px;
        background-color: #f9f9f9;
    }

    .card {
        border: 1px solid #ddd;
        border-radius: 5px;
        overflow: hidden;
    }

    .card-header {
        padding: 10px 15px;
        background-color: #007bff;
        color: white;
    }

    .card-body {
        padding: 15px;
    }
</style>

@code {
    private string CityCode = "";
    private DateTime? CheckInDate = DateTime.Today.AddDays(1);
    private DateTime? CheckOutDate = DateTime.Today.AddDays(3);
    private int Adults = 1;
    private List<HotelOfferData> HotelOffers = new();
    private string ErrorMessage = "";
    private bool IsLoading = false;
    private string AccessToken = "";
    private HotelOfferData SelectedHotel = null;
    private Offer SelectedOffer = null;

    // Fetch the Access Token when the page loads
    protected override async Task OnInitializedAsync()
    {
        AccessToken = await AmadeusService.GetAccessTokenAsync();
    }

    private async Task FetchHotelsWithPricing()
    {
        if (string.IsNullOrWhiteSpace(CityCode))
        {
            ErrorMessage = "Please enter a city code.";
            return;
        }

        if (!CheckInDate.HasValue || !CheckOutDate.HasValue)
        {
            ErrorMessage = "Please select valid check-in and check-out dates.";
            return;
        }

        if (CheckInDate >= CheckOutDate)
        {
            ErrorMessage = "Check-out date must be after check-in date.";
            return;
        }

        IsLoading = true;
        ErrorMessage = "";
        HotelOffers.Clear();
        SelectedHotel = null;
        SelectedOffer = null;

        Logger.LogInformation("Hotel search initiated for city: {CityCode}", CityCode);

        try
        {
            // Step 1: Get list of hotels
            var hotelResponse = await AmadeusService.SearchHotelsAsync(CityCode);
            var hotels = JsonSerializer.Deserialize<HotelResponse>(hotelResponse)?.Data;

            if (hotels == null || hotels.Count == 0)
            {
                ErrorMessage = "No hotels found for the specified city code.";
                IsLoading = false;
                return;
            }

            Logger.LogInformation("{HotelCount} hotels found", hotels.Count);

            // Step 2: Get pricing info for hotels (limit to 10 hotels to avoid API overload)
            var hotelsToQuery = hotels.Take(10).ToList(); // Adjust the limit as needed
            string hotelIds = string.Join(",", hotelsToQuery.Select(h => h.Id));

            string checkInDateString = CheckInDate.Value.ToString("yyyy-MM-dd");
            string checkOutDateString = CheckOutDate.Value.ToString("yyyy-MM-dd");

            Logger.LogInformation("Fetching offers for hotels: {HotelIds}, CheckInDate: {CheckInDate}, CheckOutDate: {CheckOutDate}, Adults: {Adults}",
                hotelIds, checkInDateString, checkOutDateString, Adults);

            var offersResponse = await AmadeusService.SearchHotelOffersAsync(hotelIds, checkInDateString, checkOutDateString, Adults);
            var offerData = JsonSerializer.Deserialize<HotelOfferResponse>(offersResponse)?.Data;

            HotelOffers = offerData ?? new List<HotelOfferData>();

            if (HotelOffers.Count == 0)
            {
                ErrorMessage = "No offers available for the selected dates.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error fetching hotels for {CityCode}", CityCode);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void SelectHotelOffer(HotelOfferData hotel)
    {
        SelectedHotel = hotel;
        SelectedOffer = null;
    }

    private void SelectRoom(Offer offer, string name, string price)
    {
        if (decimal.TryParse(price, out var parsedPrice))
        {
            if (CheckInDate.HasValue)
            {
                SaveHotelDetails(name, parsedPrice, CheckInDate.Value, CheckOutDate.Value);
                Navigation.NavigateTo("/packages");
            }
            else
            {
                ErrorMessage = "Please select a valid check-in date.";
            }
        }
        else
        {
            ErrorMessage = "Invalid price format.";
        }
    }

    private async Task SaveHotelDetails(string name, decimal price, DateTime CheckInDate, DateTime CheckOutDate)
    {
        try
        {
            var hotel = new Hotels
                {
                    Name = name,
                    Price = price,
                    CheckInDate = DateOnly.FromDateTime(CheckInDate),
                    CheckOutDate = DateOnly.FromDateTime(CheckOutDate)
                };

            DbContext.Hotels.Add(hotel);
            await DbContext.SaveChangesAsync();

            Logger.LogInformation("Hotel details saved successfully.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving hotel details.");
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    // Model classes
    public class HotelResponse
    {
        [JsonPropertyName("data")]
        public List<Hotel> Data { get; set; }
    }

    public class Hotel
    {
        [JsonPropertyName("hotelId")]
        public string Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("iataCode")]
        public string IataCode { get; set; }

        [JsonPropertyName("address")]
        public Address Address { get; set; }
    }

    public class Address
    {
        [JsonPropertyName("countryCode")]
        public string CountryCode { get; set; }
    }

    // Hotel Offers Models
    public class HotelOfferResponse
    {
        [JsonPropertyName("data")]
        public List<HotelOfferData> Data { get; set; }
    }

    public class HotelOfferData
    {
        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("hotel")]
        public HotelInfo Hotel { get; set; }

        [JsonPropertyName("available")]
        public bool Available { get; set; }

        [JsonPropertyName("offers")]
        public List<Offer> Offers { get; set; }
    }

    public class HotelInfo
    {
        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("hotelId")]
        public string HotelId { get; set; }

        [JsonPropertyName("chainCode")]
        public string ChainCode { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("cityCode")]
        public string CityCode { get; set; }

        [JsonPropertyName("address")]
        public HotelAddress Address { get; set; }
    }

    public class HotelAddress
    {
        [JsonPropertyName("countryCode")]
        public string CountryCode { get; set; }
    }

    public class Offer
    {
        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("checkInDate")]
        public string CheckInDate { get; set; }

        [JsonPropertyName("checkOutDate")]
        public string CheckOutDate { get; set; }

        [JsonPropertyName("rateCode")]
        public string RateCode { get; set; }

        [JsonPropertyName("room")]
        public Room Room { get; set; }

        [JsonPropertyName("guests")]
        public Guests Guests { get; set; }

        [JsonPropertyName("price")]
        public Price Price { get; set; }
    }

    public class Room
    {
        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("typeEstimated")]
        public TypeEstimated TypeEstimated { get; set; }

        [JsonPropertyName("description")]
        public Description Description { get; set; }
    }

    public class TypeEstimated
    {
        [JsonPropertyName("category")]
        public string Category { get; set; }

        [JsonPropertyName("beds")]
        public int? Beds { get; set; }

        [JsonPropertyName("bedType")]
        public string BedType { get; set; }
    }

    public class Description
    {
        [JsonPropertyName("text")]
        public string Text { get; set; }
    }

    public class Guests
    {
        [JsonPropertyName("adults")]
        public int Adults { get; set; }
    }

    public class Price
    {
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        [JsonPropertyName("total")]
        public string Total { get; set; }

        [JsonPropertyName("base")]
        public string Base { get; set; }

        [JsonPropertyName("taxes")]
        public List<Tax> Taxes { get; set; }
    }

    public class Tax
    {
        [JsonPropertyName("code")]
        public string Code { get; set; }

        [JsonPropertyName("amount")]
        public string Amount { get; set; }

        [JsonPropertyName("currency")]
        public string Currency { get; set; }
    }
}
