@page "/PackageHistory"
@inject GoTorz.Data.GoTorzContext DbContext
@inject ILogger<PackageHistory> Logger
@inject NavigationManager Navigation
@using GoTorz.Model
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<h3>My Orders</h3>

<div class="container my-5">
    @if (IsLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status"></div>
            <p>Loading your orders...</p>
        </div>
    }
    else if (Packages != null && Packages.Count > 0)
    {
        <div class="row">
            <div class="col-12">
                <div class="card shadow-lg mb-4">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0"><i class="fas fa-suitcase"></i> Your Orders</h4>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Hotel</th>
                                        <th>Departure</th>
                                        <th>Destination</th>
                                        <th>Departure Date</th>
                                        <th>Return Date</th>
                                        <th>Duration</th>
                                        <th>Price</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var package
                                   in Packages)
                                    {
                                        <tr>
                                            <td>@package.Hotels.Name</td>
                                            <td>@package.Plane.DepartureAirport</td>
                                            <td>@package.Plane.ArrivalAirport</td>
                                            <td>@package.Plane.StartDate.ToString("dd/MM/yyyy")</td>
                                            <td>@package.ReturnPlane.ReturnDate.ToString("dd/MM/yyyy")</td>
                                            <td>@package.ReturnPlane.Duration days</td>
                                            <td><strong>@package.PackagePrice?.ToString("N2") €</strong></td>
                                            <td>
                                                <button @onclick="() => ShowPackageDetails(package)" class="btn btn-sm btn-info mb-1">
                                                    <i class="fas fa-info-circle"></i> Details
                                                </button>

                                                <button @onclick="() => DeletePackageConfirmation(package)" class="btn btn-sm btn-danger mb-1">
                                                    <i class="fas fa-trash"></i> Delete
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info text-center">
            <i class="fas fa-info-circle fa-2x mb-3"></i>
            <h5>No travelpackage found</h5>
            <p>You have not selected a travelpackage yet.</p>
            <button @onclick="NavigateToBooking" class="btn btn-primary mt-2">
                <i class="fas fa-plane"></i> Book your first trip
            </button>
        </div>
    }

    @if (SelectedPackage != null && ShowDetails)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header bg-info text-white">
                        <h5 class="modal-title"><i class="fas fa-info-circle"></i> Journey Details </h5>
                        <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card mb-3">
                                    <div class="card-header bg-primary text-white">
                                        <h5><i class="fas fa-hotel"></i> Hotel Details</h5>
                                    </div>
                                    <div class="card-body">
                                        <p><strong>Hotel:</strong> @SelectedPackage.Hotels.Name</p>
                                        <p><strong>Check-in:</strong> @SelectedPackage.Hotels.CheckInDate.ToString("dd/MM/yyyy")</p>
                                        <p><strong>Check-out:</strong> @SelectedPackage.Hotels.CheckOutDate.ToString("dd/MM/yyyy")</p>

                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card mb-3">
                                    <div class="card-header bg-primary text-white">
                                        <h5><i class="fas fa-plane-departure"></i> Departure Details</h5>
                                    </div>
                                    <div class="card-body">
                                        <p><strong>From:</strong> @SelectedPackage.Plane.DepartureAirport</p>
                                        <p><strong>To:</strong> @SelectedPackage.Plane.ArrivalAirport</p>
                                        <p><strong>Date:</strong> @SelectedPackage.Plane.StartDate.ToString("dd/MM/yyyy HH:mm")</p>
                                        <p><strong>Flight No:</strong> @SelectedPackage.Plane.CarrierCode</p>

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header bg-primary text-white">
                                        <h5><i class="fas fa-plane-arrival"></i> Return Trip Details </h5>
                                    </div>
                                    <div class="card-body">
                                        <p><strong>From:</strong> @SelectedPackage.ReturnPlane.DepartureAirport</p>
                                        <p><strong>To:</strong> @SelectedPackage.ReturnPlane.ArrivalAirport</p>
                                        <p><strong>Date:</strong> @SelectedPackage.ReturnPlane.ReturnDate.ToString("dd/MM/yyyy HH:mm")</p>
                                        <p><strong>Flight No:</strong> @SelectedPackage.ReturnPlane.CarrierCode</p>

                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header bg-success text-white">
                                        <h5><i class="fas fa-receipt"></i> Price</h5>
                                    </div>
                                    <div class="card-body">

                                        <hr />
                                        <h5><strong>Total:</strong> @SelectedPackage.PackagePrice?.ToString("N2") €</h5>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                            <i class="fas fa-times"></i> Close
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
  

    @if (ShowDeleteConfirmation)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title"><i class="fas fa-exclamation-triangle"></i> Confirm deletion</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this journey?</p>
                        <p><strong>Hotel:</strong> @PackageToDelete?.Hotels.Name</p>
                        <p><strong>Destination:</strong> @PackageToDelete?.Plane.ArrivalAirport</p>
                        <p><strong>Departure Date</strong> @PackageToDelete?.Plane.StartDate.ToString("dd/MM/yyyy")</p>
                        <p>This action can not be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                            <i class="fas fa-times"></i> Cancel
                        </button>
                        <button type="button" class="btn btn-danger" @onclick="DeletePackage">
                            <i class="fas fa-trash"></i> Delete Journey
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-4">
            <i class="fas fa-exclamation-triangle"></i> @ErrorMessage
        </div>
    }

    @if (ShowSuccessMessage)
    {
        <div class="alert alert-success mt-4">
            <i class="fas fa-check-circle"></i> @SuccessMessage
        </div>
    }
</div>

@code {
    private List<Package> Packages { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private string ErrorMessage { get; set; } = "";
    private string SuccessMessage { get; set; } = "";
    private bool ShowSuccessMessage { get; set; } = false;

    // Detaljeret visning
    private Package SelectedPackage { get; set; } = null;
    private bool ShowDetails { get; set; } = false;

    // Redigering
    private Package EditingPackage { get; set; } = null;
    private DateTime EditCheckInDate { get; set; }
    private DateTime EditCheckOutDate { get; set; }
    private DateTime EditStartDate { get; set; }
    private DateTime EditReturnDate { get; set; }

    // Sletning
    private Package PackageToDelete { get; set; } = null;
    private bool ShowDeleteConfirmation { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPackages();
    }

    private async Task LoadPackages()
    {
        IsLoading = true;
        ErrorMessage = "";

        try
        {
            // Hent pakker med relaterede data
            Packages = await DbContext.Package
                .Include(p => p.Hotels)
                .Include(p => p.Plane)
                .Include(p => p.ReturnPlane)
                .ToListAsync();

            Logger.LogInformation($"Loaded {Packages.Count} packages.");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading packages: {ex.Message}";
            Logger.LogError(ex, "Error loading packages");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void NavigateToBooking()
    {
        Navigation.NavigateTo("/SalesPlanePage");
    }

    private void ShowPackageDetails(Package package)
    {
        SelectedPackage = package;
        ShowDetails = true;
    }

    private void BeginEditPackage(Package package)
    {
        EditingPackage = package;
        EditCheckInDate = package.Hotels.CheckInDate.ToDateTime(new TimeOnly(0, 0));
        EditCheckOutDate = package.Hotels.CheckOutDate.ToDateTime(new TimeOnly(0, 0));
        EditStartDate = package.Plane.StartDate;
        EditReturnDate = package.ReturnPlane.ReturnDate;
    }

    private async Task SaveEditedPackage()
    {
        try
        {
            // Opdater datoer
            EditingPackage.Hotels.CheckInDate = DateOnly.FromDateTime(EditCheckInDate);
            EditingPackage.Hotels.CheckOutDate = DateOnly.FromDateTime(EditCheckOutDate);
            EditingPackage.Plane.StartDate = EditStartDate;
            EditingPackage.ReturnPlane.ReturnDate = EditReturnDate;

            // Genberegn varighed
            EditingPackage.ReturnPlane.Duration = (EditingPackage.ReturnPlane.ReturnDate - EditingPackage.Plane.StartDate).Days;

            await DbContext.SaveChangesAsync();

            // Vis succesbesked
            SuccessMessage = "Rejsedetaljer opdateret med succes!";
            ShowSuccessMessage = true;

            // Luk modal
            EditingPackage = null;

            // Skjul succesbesked efter 3 sekunder
            await Task.Delay(3000);
            ShowSuccessMessage = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Fejl ved opdatering: {ex.Message}";
            Logger.LogError(ex, "Error updating package");
        }
    }

    private void DeletePackageConfirmation(Package package)
    {
        PackageToDelete = package;
        ShowDeleteConfirmation = true;
    }

    private async Task DeletePackage()
    {
        try
        {
            // Fjern pakke fra databasen
            DbContext.Package.Remove(PackageToDelete);
            await DbContext.SaveChangesAsync();

            // Fjern fra listen
            Packages.Remove(PackageToDelete);

            // Vis succesbesked
            SuccessMessage = "Journey deleted!";
            ShowSuccessMessage = true;

            // Luk modal
            PackageToDelete = null;
            ShowDeleteConfirmation = false;

            // Skjul succesbesked efter 3 sekunder
            await Task.Delay(3000);
            ShowSuccessMessage = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting journey: {ex.Message}";
            Logger.LogError(ex, "Error deleting package");
        }
    }

    private void CloseModal()
    {
        ShowDetails = false;
        SelectedPackage = null;
        EditingPackage = null;
        ShowDeleteConfirmation = false;
        PackageToDelete = null;
    }
}
