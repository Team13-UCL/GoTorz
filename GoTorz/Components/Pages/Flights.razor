@inject HttpClient Http
@page "/Flights"
@inject AmadeusAuthService AmadeusService
@using System.Text.Json.Serialization;
@using System.Text.Json
@rendermode InteractiveServer

<style>
    /* Dark Mode Theme */
    .flight-search-container {
        background-color: #1a1a2e;
        color: #f0f0f0;
        padding: 2rem;
        border-radius: 0.5rem;
        font-family: 'Inter', sans-serif;
    }

    .flight-search-heading {
        color: #00bcd4;
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
    }

    .form-container {
        background-color: #16213e;
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
    }

    .form-grid {
        display: grid;
        grid-template-columns: repeat(1, 1fr);
        gap: 1rem;
    }

    .form-field {
        margin-bottom: 1rem;
    }

    .field-label {
        display: block;
        font-size: 0.875rem;
        font-weight: 500;
        color: #a0aec0;
        margin-bottom: 0.375rem;
    }

    .field-input {
        width: 100%;
        padding: 0.5rem 0.75rem;
        background-color: #0f3460;
        border: 1px solid #2c3e50;
        border-radius: 0.375rem;
        color: #f0f0f0;
        outline: none;
        transition: all 0.3s;
    }

        .field-input:focus {
            border-color: #00bcd4;
            box-shadow: 0 0 0 2px rgba(0, 188, 212, 0.2);
        }

    .search-button {
        width: 100%;
        padding: 0.625rem 1rem;
        font-size: 0.9375rem;
        font-weight: 500;
        color: #ffffff;
        background-color: #00bcd4;
        border: none;
        border-radius: 0.375rem;
        cursor: pointer;
        transition: all 0.3s;
    }

        .search-button:hover {
            background-color: #00a0b2;
        }

        .search-button:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(0, 188, 212, 0.4);
        }

    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2rem;
    }

    .spinner {
        height: 3rem;
        width: 3rem;
        border-radius: 50%;
        border: 3px solid rgba(0, 188, 212, 0.2);
        border-top-color: #00bcd4;
        animation: spin 1s linear infinite;
    }


    .loading-text {
        margin-left: 1rem;
        color: #a0aec0;
    }

    .results-container {
        background-color: #16213e;
        padding: 1.5rem;
        border-radius: 0.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
    }

    .results-heading {
        color: #00bcd4;
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .results-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .flight-card {
        background-color: #0f3460;
        border-radius: 0.375rem;
        padding: 1rem;
        border-left: 4px solid #00bcd4;
        transition: transform 0.2s;
    }

        .flight-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

    .flight-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #2c3e50;
    }

    .flight-id {
        font-weight: 600;
        color: #ffffff;
    }

    .flight-price {
        font-weight: 600;
        color: #4cd137;
    }

    .segment {
        display: grid;
        grid-template-columns: 1fr 40px 1fr;
        gap: 0.5rem;
        align-items: center;
        margin-bottom: 0.75rem;
        padding-bottom: 0.75rem;
        border-bottom: 1px dashed #2c3e50;
    }

        .segment:last-child {
            margin-bottom: 0;
            padding-bottom: 0;
            border-bottom: none;
        }

    .airport {
        font-weight: 600;
        color: #00bcd4;
    }

    .datetime {
        font-size: 0.75rem;
        color: #a0aec0;
    }

    .arrow {
        display: flex;
        justify-content: center;
        color: #a0aec0;
    }

    .carrier {
        display: flex;
        justify-content: flex-end;
        font-size: 0.875rem;
        color: #a0aec0;
    }
</style>

<div class="flight-search-container">
    <h3 class="flight-search-heading">Search Flights</h3>

    @if (string.IsNullOrEmpty(AccessToken))
    {
        <p style="color: #a0aec0; font-style: italic;">Fetching access token...</p>
    }
    else
    {
        <div class="form-container">
            <div class="form-grid">
                <div class="form-field">
                    <label class="field-label">Origin Airport Code:</label>
                    <input @bind="Origin" placeholder="e.g. JFK" class="field-input" />
                </div>
                <div class="form-field">
                    <label class="field-label">Destination Airport Code:</label>
                    <input @bind="Destination" placeholder="e.g. LAX" class="field-input" />
                </div>
                <div class="form-field">
                    <label class="field-label">Departure Date:</label>
                    <input type="date" @bind="DepartureDate" class="field-input" />
                </div>
                <div class="form-field">
                    <button @onclick="FetchFlights" class="search-button">
                        Search Flights
                    </button>
                </div>
            </div>
        </div>

        @if (IsLoading)
        {
            <div class="loading-container">
                <div class="spinner"></div>
                <p class="loading-text">Searching for flights...</p>
            </div>
        }
        else if (FlightResults != null && FlightResults.Count > 0)
        {
            <div class="results-container">
                <h4 class="results-heading">Flight Results</h4>
                <div class="results-grid">
                    @foreach (var flight in FlightResults)
                    {
                        <div class="flight-card">
                            <div class="flight-header">
                                <div class="flight-id">Flight #@flight.Id</div>
                                <div class="flight-price">@flight.Price.Currency @flight.Price.Total</div>
                            </div>

                            @foreach (var itinerary in flight.Itineraries)
                            {
                                @foreach (var segment in itinerary.Segments)
                                {
                                    <div class="segment">
                                        <div>
                                            <div class="airport">@segment.Departure.IataCode</div>
                                            <div class="datetime">@segment.Departure.At.ToString("MMM dd, HH:mm")</div>
                                        </div>
                                        <div class="arrow">→</div>
                                        <div>
                                            <div class="airport">@segment.Arrival.IataCode</div>
                                            <div class="datetime">@segment.Arrival.At.ToString("MMM dd, HH:mm")</div>
                                        </div>
                                    </div>
                                    <div class="carrier">@segment.CarrierCode @segment.FlightNumber</div>
                                }
                            }
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

@code {
    private string Origin = "";
    private string Destination = "";
    private DateTime? DepartureDate = null;
    private List<Flight> FlightResults = new();
    private string ErrorMessage = "";
    private bool IsLoading = false;
    private string AccessToken = "";

    // Fetch the Access Token when the page loads
    protected override async Task OnInitializedAsync()
    {
        AccessToken = await AmadeusService.GetAccessTokenAsync();
    }

    private async Task FetchFlights()
    {
        IsLoading = true;
        ErrorMessage = "";
        FlightResults.Clear();

        try
        {
            if (DepartureDate.HasValue)
            {
                string departureDateString = DepartureDate.Value.ToString("yyyy-MM-dd");
                var response = await AmadeusService.SearchFlightsAsync(Origin, Destination, departureDateString);

                var jsonDocument = JsonDocument.Parse(response);
                var flightData = jsonDocument.RootElement.GetProperty("data").GetRawText();
                FlightResults = JsonSerializer.Deserialize<List<Flight>>(flightData);
            }
            else
            {
                ErrorMessage = "Please select a valid departure date.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    public class Flight
    {
        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("itineraries")]
        public List<Itinerary> Itineraries { get; set; }

        [JsonPropertyName("price")]
        public Price Price { get; set; }
    }

    public class Itinerary
    {
        [JsonPropertyName("segments")]
        public List<Segment> Segments { get; set; }
    }

    public class Segment
    {
        [JsonPropertyName("departure")]
        public DepartureArrival Departure { get; set; }

        [JsonPropertyName("arrival")]
        public DepartureArrival Arrival { get; set; }

        [JsonPropertyName("carrierCode")]
        public string CarrierCode { get; set; }

        [JsonPropertyName("number")]
        public string FlightNumber { get; set; }
    }

    public class DepartureArrival
    {
        [JsonPropertyName("iataCode")]
        public string IataCode { get; set; }

        [JsonPropertyName("at")]
        public DateTime At { get; set; }
    }

    public class Price
    {
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        [JsonPropertyName("total")]
        public string Total { get; set; }
    }

}

