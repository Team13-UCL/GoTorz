@inject HttpClient Http
@page "/Flights"
@inject AmadeusAuthService AmadeusService
@using System.Text.Json.Serialization;
@using System.Text.Json
@rendermode InteractiveServer

<h3 class="text-2xl font-bold mb-4 text-blue-700">Search Flights</h3>

@if (string.IsNullOrEmpty(AccessToken))
{
    <p class="text-gray-600 italic">Fetching access token...</p>
}
else
{
    <div class="bg-white p-6 rounded-lg shadow-md mb-6">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1">Origin Airport Code:</label>
                <input @bind="Origin" placeholder="e.g. JFK" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1">Destination Airport Code:</label>
                <input @bind="Destination" placeholder="e.g. LAX" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1">Departure Date:</label>
                <input type="date" @bind="DepartureDate" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            <div class="mb-4 flex items-end">
                <button @onclick="FetchFlights" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition duration-300">
                    Search Flights
                </button>
            </div>
        </div>
    </div>

    @if (IsLoading)
    {
        <div class="flex justify-center items-center p-8">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
            <p class="ml-4 text-gray-600">Loading...</p>
        </div>
    }
    else if (FlightResults != null && FlightResults.Count > 0)
    {
        <div class="bg-white p-6 rounded-lg shadow-md">
            <h4 class="text-xl font-semibold mb-4 text-gray-800">Flight Results:</h4>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Flight ID</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Departure</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Arrival</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Carrier</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var flight in FlightResults)
                        {
                            @foreach (var itinerary in flight.Itineraries)
                            {
                                @foreach (var segment in itinerary.Segments)
                                {
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@flight.Id</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <div class="font-semibold">@segment.Departure.IataCode</div>
                                            <div class="text-xs">@segment.Departure.At</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <div class="font-semibold">@segment.Arrival.IataCode</div>
                                            <div class="text-xs">@segment.Arrival.At</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            @segment.CarrierCode @segment.FlightNumber
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-green-600">
                                            @flight.Price.Currency @flight.Price.Total
                                        </td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
}

@code {
    private string Origin = "";
    private string Destination = "";
    private DateTime? DepartureDate = null;
    private List<Flight> FlightResults = new();
    private string ErrorMessage = "";
    private bool IsLoading = false;
    private string AccessToken = "";

    // Fetch the Access Token when the page loads
    protected override async Task OnInitializedAsync()
    {
        AccessToken = await AmadeusService.GetAccessTokenAsync();
    }

    private async Task FetchFlights()
    {
        IsLoading = true;
        ErrorMessage = "";
        FlightResults.Clear();

        try
        {
            if (DepartureDate.HasValue)
            {
                string departureDateString = DepartureDate.Value.ToString("yyyy-MM-dd");
                var response = await AmadeusService.SearchFlightsAsync(Origin, Destination, departureDateString);

                var jsonDocument = JsonDocument.Parse(response);
                var flightData = jsonDocument.RootElement.GetProperty("data").GetRawText();
                FlightResults = JsonSerializer.Deserialize<List<Flight>>(flightData);
            }
            else
            {
                ErrorMessage = "Please select a valid departure date.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    public class Flight
    {
        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("itineraries")]
        public List<Itinerary> Itineraries { get; set; }

        [JsonPropertyName("price")]
        public Price Price { get; set; }
    }

    public class Itinerary
    {
        [JsonPropertyName("segments")]
        public List<Segment> Segments { get; set; }
    }

    public class Segment
    {
        [JsonPropertyName("departure")]
        public DepartureArrival Departure { get; set; }

        [JsonPropertyName("arrival")]
        public DepartureArrival Arrival { get; set; }

        [JsonPropertyName("carrierCode")]
        public string CarrierCode { get; set; }

        [JsonPropertyName("number")]
        public string FlightNumber { get; set; }
    }

    public class DepartureArrival
    {
        [JsonPropertyName("iataCode")]
        public string IataCode { get; set; }

        [JsonPropertyName("at")]
        public DateTime At { get; set; }
    }

    public class Price
    {
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        [JsonPropertyName("total")]
        public string Total { get; set; }
    }

}

