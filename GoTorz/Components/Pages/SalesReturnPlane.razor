@page "/SalesReturnPlane"
@inject NavigationManager Navigation
@inject GoTorz.Data.GoTorzContext DbContext
@inject ILogger<SalesReturnPlane> Logger
@inject AmadeusAuthService AmadeusService
@using System.Text.Json.Serialization
@using System.Text.Json
@using GoTorz.Model
@using Microsoft.AspNetCore.Components
@rendermode InteractiveServer

<h3>Select Return Flight</h3>

@if (string.IsNullOrEmpty(AccessToken))
{
    <p>Fetching access token...</p>
}
else
{
    <div class="search-form">
        <div class="form-group">
            <label>Outbound Flight: @DepartureAirport to @ArrivalAirport</label>
        </div>
        <div class="form-group">
            <label>Return Flight: @ArrivalAirport to @DepartureAirport</label>
        </div>
        <div class="form-group">
            <label>Return Date:</label>
            <input type="date" @bind="ReturnDate" class="form-control" />
        </div>

        <button @onclick="FetchReturnFlights" class="btn btn-primary">Search Return Flights</button>
    </div>

    @if (IsLoading)
    {
        <p>Loading...</p>
    }
    else if (ReturnFlightResults != null && ReturnFlightResults.Count > 0)
    {
        <h4>Return Flight Results:</h4>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Flight ID</th>
                    <th>Departure</th>
                    <th>Arrival</th>
                    <th>Carrier</th>
                    <th>Price</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var flight in ReturnFlightResults)
                {
                    @foreach (var itinerary in flight.Itineraries)
                    {
                        @foreach (var segment in itinerary.Segments)
                        {
                            <tr>
                                <td>@flight.Id</td>
                                <td>@segment.Departure.IataCode @segment.Departure.At</td>
                                <td>@segment.Arrival.IataCode @segment.Arrival.At</td>
                                <td>@segment.CarrierCode @segment.FlightNumber</td>
                                <td>@flight.Price.Currency @flight.Price.Total</td>
                                <td>
                                    <button @onclick="() => SelectReturnFlight(segment.Departure.IataCode, segment.Arrival.IataCode, segment.CarrierCode + segment.FlightNumber, flight.Price.Total)" class="btn btn-sm btn-info">Select</button>
                                </td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p style="color: red;">@ErrorMessage</p>
    }
}

<style>
    .search-form {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #f9f9f9;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .btn {
        display: block;
        width: 100%;
        padding: 10px;
        border: none;
        border-radius: 5px;
        background-color: #007bff;
        color: white;
        font-size: 16px;
        cursor: pointer;
    }

        .btn:hover {
            background-color: #0056b3;
        }

    .table {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 10px;
            border: 1px solid #ddd;
        }

        .table th {
            background-color: #f2f2f2;
        }
</style>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string DepartureAirport { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string ArrivalAirport { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Carrier { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public decimal FlightPrice { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public DateTime StartDate { get; set; } // Add StartDate parameter

    [Parameter]
    [SupplyParameterFromQuery]
    public int PlaneId { get; set; } // Add PlaneId parameter

    private DateTime? ReturnDate = null;
    private string ErrorMessage = "";
    private bool IsLoading = false;
    private string AccessToken = "";
    private List<Flight> ReturnFlightResults = new();

    protected override async Task OnInitializedAsync()
    {
        AccessToken = await AmadeusService.GetAccessTokenAsync();
        Logger.LogInformation($"Initialized with parameters: ArrivalAirport={ArrivalAirport}, DepartureAirport={DepartureAirport}, Carrier={Carrier}, FlightPrice={FlightPrice}, StartDate={StartDate}, PlaneId={PlaneId}");
    }

    private async Task FetchReturnFlights()
    {
        IsLoading = true;
        ErrorMessage = "";
        ReturnFlightResults.Clear();
        Logger.LogInformation("Fetching return flights");

        try
        {
            if (ReturnDate.HasValue)
            {
                if (string.IsNullOrEmpty(ArrivalAirport) || string.IsNullOrEmpty(DepartureAirport))
                {
                    ErrorMessage = "Missing departure or arrival airport code.";
                    IsLoading = false;
                    return;
                }

                string returnDateString = ReturnDate.Value.ToString("yyyy-MM-dd");
                Logger.LogInformation($"Fetching return flights with parameters: Departure={ArrivalAirport}, Arrival={DepartureAirport}, ReturnDate={returnDateString}");

                var response = await AmadeusService.SearchFlightsAsync(ArrivalAirport, DepartureAirport, returnDateString);
                Logger.LogInformation("JSON Response: {response}", response);

                var jsonDocument = JsonDocument.Parse(response);
                var flightData = jsonDocument.RootElement.GetProperty("data").GetRawText();
                ReturnFlightResults = JsonSerializer.Deserialize<List<Flight>>(flightData);

                Logger.LogInformation("Return flights fetched successfully.");
            }
            else
            {
                ErrorMessage = "Please select a valid return date.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error fetching return flights.");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task SaveReturnFlightDetails(string departure, string arrival, string carrier, decimal price, DateTime returnDate, int planeId)
    {
        try
        {
            int duration = (returnDate - StartDate).Days; // Calculate duration

            var returnPlane = new ReturnPlane
                {
                    DepartureAirport = departure,
                    ArrivalAirport = arrival,
                    CarrierCode = carrier,
                    Price = price,
                    ReturnDate = returnDate,
                    Duration = duration // Save duration
                };

            DbContext.ReturnPlane.Add(returnPlane);
            await DbContext.SaveChangesAsync();

            Logger.LogInformation("Return flight details saved successfully.");

            // Navigate to the hotel selection page with the PlaneId and ReturnPlaneID
            Navigation.NavigateTo($"/SalesHotelPage?PlaneId={planeId}&ReturnPlaneID={returnPlane.ReturnPlaneId}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving return flight details.");
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    private void SelectReturnFlight(string departure, string arrival, string carrier, string price)
    {
        if (decimal.TryParse(price, out var parsedPrice))
        {
            if (ReturnDate.HasValue)
            {
                SaveReturnFlightDetails(departure, arrival, carrier, parsedPrice, ReturnDate.Value, PlaneId);
            }
            else
            {
                ErrorMessage = "Please select a valid return date.";
            }
        }
        else
        {
            ErrorMessage = "Invalid price format.";
        }
    }

    public class Flight
    {
        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("itineraries")]
        public List<Itinerary> Itineraries { get; set; }

        [JsonPropertyName("price")]
        public Price Price { get; set; }
    }

    public class Itinerary
    {
        [JsonPropertyName("segments")]
        public List<Segment> Segments { get; set; }
    }

    public class Segment
    {
        [JsonPropertyName("departure")]
        public DepartureArrival Departure { get; set; }

        [JsonPropertyName("arrival")]
        public DepartureArrival Arrival { get; set; }

        [JsonPropertyName("carrierCode")]
        public string CarrierCode { get; set; }

        [JsonPropertyName("number")]
        public string FlightNumber { get; set; }
    }

    public class DepartureArrival
    {
        [JsonPropertyName("iataCode")]
        public string IataCode { get; set; }

        [JsonPropertyName("at")]
        public DateTime At { get; set; }
    }

    public class Price
    {
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        [JsonPropertyName("total")]
        public string Total { get; set; }
    }
}
