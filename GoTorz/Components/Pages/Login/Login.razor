@*Makes the component accessible at /Login*@
@page "/login"
@*Form validation such as Required EmailAdress and Password*@
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using GoTorz.Components.Middleware
@using GoTorz.Components.Shared
@using GoTorz.Data
@using GoTorz.Services
@using Microsoft.AspNetCore.Authentication.Cookies
@inject NavigationManager nav
@inject UserService UserService

<h1>Login</h1>
<div class="row">
    <div class="col-md-4">
        <Alert @ref="alert"/>
        <section>
            @*EditForm Handles form submission, Model''input'' binds the form to Input, OnValidSubmit Calls the OnLogin when the form is validated*@
            <EditForm Model="Input" method="post" OnValidSubmit="OnLogin" FormName="Login">
                @*DataAnnotationsValidator, enables validation based on the [Required] and email attributes*@
                <DataAnnotationsValidator />
                <hr />
                <div class="form-floating mb-3">
                    @*Binds the user input to Email and Passward, as well as validate and displays an error message if it finds an error*@
                    <InputText @bind-Value="Input.Email" class="form-control" aria-required="true" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" aria-required="true" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div>
                    @*The button submits the form and triggers OnLogin()*@
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Login</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private Alert alert;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    //Defines the Email and Password and and validates the user input with validation attributes
    public async Task OnLogin() 
    {
        var user = UserService.Verify(Input.Email, Input.Password);
        if(user is null)
        {
            alert.ShowFailed("Invalid Email or Password");
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, user.Email),
            new Claim(ClaimTypes.Role, user.Role),
        };

        var claimIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

        ClaimsPrincipal claimsPrincipal = new ClaimsPrincipal(claimIdentity);
        Guid key = Guid.NewGuid();
        AuthMiddleware.Logins[key] = claimsPrincipal;

        nav.NavigateTo($"/login?key={key}", true);
    }
    
    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        // Hides the password input
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}