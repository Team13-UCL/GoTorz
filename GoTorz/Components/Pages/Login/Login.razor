@*Makes the component accessible at /Login*@
@page "/login"
@*Form validation such as Required EmailAdress and Password*@
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using GoTorz.Components.Middleware
@using GoTorz.Components.Shared
@using GoTorz.Data
@using GoTorz.Services
@using Microsoft.AspNetCore.Authentication.Cookies
@using System;
@using System.Security.Cryptography;
@inject NavigationManager nav
@inject UserService UserService

<h1>Login</h1>
<div class="row">
    <div class="col-md-4">
        <Alert @ref="alert"/>
        <section>
            @*EditForm Handles form submission, Model''input'' binds the form to Input, OnValidSubmit Calls the OnLogin when the form is validated*@
            <EditForm Model="Input" method="post" OnValidSubmit="OnLogin" FormName="Login">
                @*DataAnnotationsValidator, enables validation based on the [Required] and email attributes*@
                <DataAnnotationsValidator />
                <hr />
                <div class="form-floating mb-3">
                    @*Binds the user input to Email and Passward, as well as validate and displays an error message if it finds an error*@
                    <InputText @bind-Value="Input.Email" class="form-control" aria-required="true" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" aria-required="true" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div>
                    @*The button submits the form and triggers OnLogin()*@
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Login</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private Alert alert;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    //Defines the Email and Password and and validates the user input with validation attributes
    public async Task OnLogin() 
    {
        var user = UserService.GetUserByEmail(Input.Email);
        if (user is null || !PasswordHelper.VerifyPassword(Input.Password, user.Password))
        {
            alert.ShowFailed("Invalid Email or Password");
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, user.Name),
            new Claim(ClaimTypes.Name, user.Email),
            new Claim(ClaimTypes.Role, user.Role),
            new Claim(ClaimTypes.NameIdentifier, user.UserID.ToString()), // BRUG UserID HER
        };

        var claimIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

        ClaimsPrincipal claimsPrincipal = new ClaimsPrincipal(claimIdentity);
        Guid key = Guid.NewGuid();
        AuthMiddleware.Logins[key] = claimsPrincipal;

        nav.NavigateTo($"/login?key={key}", true);
    }
    
    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        // Hides the password input
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
    public static class PasswordHelper
    {
        public static string HashPassword(string password)
        {
            byte[] salt = new byte[16];
            using (var rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(salt);
            }

            using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 100_000, HashAlgorithmName.SHA256))
            {
                byte[] hash = pbkdf2.GetBytes(32);

                byte[] hashBytes = new byte[48];
                Array.Copy(salt, 0, hashBytes, 0, 16);
                Array.Copy(hash, 0, hashBytes, 16, 32);

                return Convert.ToBase64String(hashBytes);
            }
        }

        public static bool VerifyPassword(string password, string storedHash)
        {
            byte[] hashBytes = Convert.FromBase64String(storedHash);

            byte[] salt = new byte[16];
            Array.Copy(hashBytes, 0, salt, 0, 16);

            using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 100_000, HashAlgorithmName.SHA256))
            {
                byte[] hash = pbkdf2.GetBytes(32);

                for (int i = 0; i < 32; i++)
                {
                    if (hashBytes[i + 16] != hash[i])
                        return false;
                }
            }

            return true;
        }
    }
}