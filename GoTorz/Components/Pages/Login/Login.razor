@*Makes the component accessible at /Login*@
@page "/login"
@*Form validation such as Required EmailAdress and Password*@
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using GoTorz.Components.Middleware
@using GoTorz.Components.Shared
@using GoTorz.Data
@using GoTorz.Services
@using Microsoft.AspNetCore.Authentication.Cookies
@using System;
@using System.Security.Cryptography;
@inject NavigationManager nav
@inject UserService UserService


<body style="background-color: #0F52BA; margin: 0; padding: 0;">
</body>

<section class="vh-100" style="background-color: #0F52BA; width: 100%; height: 100vh;">
    <div class="d-flex justify-content-center align-items-center h-100">
        <div class="col col-xl-10">
            <div class="card" style="border-radius: 1rem;">
                <div class="row g-0">
                    <div class="col-md-6 col-lg-5 d-none d-md-block" style="text-align:">
                        <center>
                            <img src="https://s3-eu-west-1.amazonaws.com/tpd/logos/65327cea18e86bb459a43f66/0x0.png" alt="Gotorz logo"
                                 style="max-width: 350px; margin-top: 100px;"
                                 class="d-block mx-auto mb-4" />
                                 
                        </center>
                    </div>
                    <div class="col-md-6 col-lg-7 d-flex align-items-center">
                        <div class="card-body p-4 p-lg-5 text-black">

                            <Alert @ref="alert" />
                            <section>
                            @*EditForm Handles form submission, Model''input'' binds the form to Input, OnValidSubmit Calls the OnLogin when the form is validated*@
                            <EditForm Model="Input" method="post" OnValidSubmit="OnLogin" FormName="Login">
                                @*DataAnnotationsValidator, enables validation based on the [Required] and email attributes*@
                                <DataAnnotationsValidator />

                                <div class="d-flex align-items-center mb-3 pb-1">
                                    <i class="fas fa-cubes fa-2x me-3" style="color: #ff6219;"></i>
                                    <span class="h1 fw-bold mb-0">GoTorz</span>
                                </div>

                                <h5 class="fw-normal mb-3 pb-3" style="letter-spacing: 1px;">Sign into your account</h5>
                                <hr />
                                <div class="form-floating mb-3">
                                    @*Binds the user input to Email and Passward, as well as validate and displays an error message if it finds an error*@
                                    <InputText @bind-Value="Input.Email" class="form-control" aria-required="true" />
                                    <label for="email" class="form-label">Email</label>
                                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                                </div>

                                <div class="form-floating mb-3">
                                    <InputText type="password" @bind-Value="Input.Password" class="form-control" aria-required="true" />
                                    <label for="password" class="form-label">Password</label>
                                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                                </div>

                                <div class="pt-1 mb-4">
                                    <button type="submit" class="btn btn-dark btn-lg btn-block">Login</button>
                                </div>

                                <p class="mb-5 pb-lg-2" style="color: #393f81;">
                                    Don't have an account? <a href="/Register" style="color: #393f81;">Register here</a>
                                </p>
                                <a href="#!" class="small text-muted">Terms of use.</a>
                                <a href="#!" class="small text-muted">Privacy policy</a>
                            </EditForm>
                            </section>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private Alert alert;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    //Defines the Email and Password and and validates the user input with validation attributes
    public async Task OnLogin() 
    {
        var user = UserService.GetUserByEmail(Input.Email);
        if (user is null || !PasswordHelper.VerifyPassword(Input.Password, user.Password))
        {
            alert.ShowFailed("Invalid Email or Password");
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, user.Name),
            new Claim(ClaimTypes.Name, user.Email),
            new Claim(ClaimTypes.Role, user.Role),
            new Claim(ClaimTypes.NameIdentifier, user.UserID.ToString()), // BRUG UserID HER
        };

        var claimIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

        ClaimsPrincipal claimsPrincipal = new ClaimsPrincipal(claimIdentity);
        Guid key = Guid.NewGuid();
        AuthMiddleware.Logins[key] = claimsPrincipal;

        nav.NavigateTo($"/login?key={key}", true);
    }
    
    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        // Hides the password input
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
    public static class PasswordHelper
    {
        public static string HashPassword(string password)
        {
            byte[] salt = new byte[16];
            using (var rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(salt);
            }

            using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 100_000, HashAlgorithmName.SHA256))
            {
                byte[] hash = pbkdf2.GetBytes(32);

                byte[] hashBytes = new byte[48];
                Array.Copy(salt, 0, hashBytes, 0, 16);
                Array.Copy(hash, 0, hashBytes, 16, 32);

                return Convert.ToBase64String(hashBytes);
            }
        }

        public static bool VerifyPassword(string password, string storedHash)
        {
            byte[] hashBytes = Convert.FromBase64String(storedHash);

            byte[] salt = new byte[16];
            Array.Copy(hashBytes, 0, salt, 0, 16);

            using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 100_000, HashAlgorithmName.SHA256))
            {
                byte[] hash = pbkdf2.GetBytes(32);

                for (int i = 0; i < 32; i++)
                {
                    if (hashBytes[i + 16] != hash[i])
                        return false;
                }
            }

            return true;
        }
    }
}