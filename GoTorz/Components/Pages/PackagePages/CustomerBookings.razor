@page "/CustomerBookings"
 @using GoTorz.Model
@using Microsoft.AspNetCore.Authorization
 @using Microsoft.EntityFrameworkCore
 @inject GoTorz.Data.GoTorzContext DbContext
 @inject NavigationManager Navigation
@attribute [Authorize(Roles = "Sales,Admin")]
 @rendermode InteractiveServer

<div class="container my-5">
    <img src="https://gotorz.ae/assets/img/logo-medium.png" alt="Gotorz logo" style="max-width: 200px;" class="d-block mx-auto mb-4" />
    <h1 class="text-center text-warning mb-4">Customer Bookings</h1>

    @if (IsLoading)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-warning" role="status"></div>
            <p>Loading your bookings...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle"></i> @ErrorMessage
        </div>
    }
    else if (UserBookings?.Any() == true)
    {
        <div class="list-group">
            @foreach (var booking in UserBookings)
            {
                <div class="list-group-item mb-3 shadow-sm">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5>Booking @GetBookingReference(booking)</h5>
                            <p class="mb-1">
                                <i class="fas fa-calendar-alt"></i>
                                Booked on: @booking.BookingDate.ToString("dd/MM/yyyy")
                            </p>
                            <p class="mb-1">
                                <i class="fas fa-info-circle"></i>
                                Status: <span class="badge bg-@GetStatusBadgeColor(booking.Status)">@booking.Status</span>
                            </p>
                        </div>
                        <div>
                        </div>
                    </div>

                    @if (booking.Package != null)
                    {
                        <div class="mt-3 p-3 bg-light rounded">
                            <h6>Trip Details:</h6>
                            <p>@booking.Package.Plane.DepartureAirport → @booking.Package.Plane.ArrivalAirport</p>
                            <p>Hotel: @booking.Package.Hotels.Name</p>
                            <p>Total: @booking.Package.PackagePrice?.ToString("N2") €</p>
                        </div>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info text-center">
            <i class="fas fa-info-circle fa-2x mb-3"></i>
            <h5>No Bookings Found</h5>
            <p>You haven't made any bookings yet.</p>
            <a href="/destinations" class="btn btn-warning mt-3">Browse Destinations</a>
        </div>
    }
</div>

@code {
    private List<PackageUser> UserBookings { get; set; }
    private bool IsLoading { get; set; } = true;
    private string ErrorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // In a real app, you would filter by logged-in user
            // For now, we'll just get all bookings
            UserBookings = await DbContext.PackageUser
                .Include(pu => pu.Package)
                .ThenInclude(p => p.Plane)
                .Include(pu => pu.Package)
                .ThenInclude(p => p.Hotels)

                .OrderByDescending(pu => pu.BookingDate)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading bookings: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private string GetBookingReference(PackageUser booking)
    {
        // Bruger en kombination af dato og ID'er til at skabe en unik reference
        return $"GT-{booking.BookingDate:yyMMdd}-{booking.PackagePlaneId}-{booking.PackageHotelId}-{booking.ReturnPlaneID}";
    }
    // Returnerer en farve baseret på bookingstatus
    private string GetStatusBadgeColor(string status)
    {
        return status switch
        {
            "Confirmed" => "success",
            "Cancelled" => "danger",
            _ => "secondary"
        };
    }

    private async Task CancelBooking(PackageUser booking)
    {
        try
        {
            booking.Status = "Cancelled";
            DbContext.PackageUser.Update(booking);
            await DbContext.SaveChangesAsync();

            // Refresh the list
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error cancelling booking: {ex.Message}";
        }
    }
}
