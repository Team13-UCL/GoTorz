@page "/SalesPlanePage"
@inject HttpClient Http
@inject ILogger<SalesPlanePage> Logger
@inject AmadeusAuthService AmadeusService
@using System.Text.Json.Serialization
@using System.Text.Json
@using GoTorz.Model
@using Microsoft.AspNetCore.Authorization
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Admin,Sales")]
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject GoTorz.Data.GoTorzContext DbContext
@using System.Globalization

<h3>Search Flights</h3>

@if (string.IsNullOrEmpty(AccessToken))
{
    <p>Fetching access token...</p>
}
else
{
    <div class="container my-5">
        <div class="row justify-content-center">
            <div class="col-lg-6 col-md-8">
                <div class="card shadow-lg">
                    <div class="card-body">
                        <h3 class="text-center mb-4"><i class="fas fa-plane-departure"></i> Find Your Flight</h3>

                        <div class="form-group">
                            <label><i class="fas fa-plane"></i> Origin Airport Code:</label>
                            <input @bind="Origin" placeholder="e.g. JFK" class="form-control" />
                        </div>

                        <div class="form-group mt-3">
                            <label><i class="fas fa-plane-arrival"></i> Destination Airport Code:</label>
                            <input @bind="Destination" placeholder="e.g. LAX" class="form-control" />
                        </div>

                        <div class="form-group mt-3">
                            <label><i class="fas fa-calendar-alt"></i> Departure Date:</label>
                            <input type="date" @bind="DepartureDate" class="form-control" />
                        </div>

                        <div class="text-center mt-4">
                            <button @onclick="FetchFlights" class="btn btn-primary w-100">
                                <i class="fas fa-search"></i> Search Flights
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (IsLoading)
        {
            <div class="text-center mt-4">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Searching for flights...</p>
            </div>
        }
        else if (FlightResults != null && FlightResults.Count > 0)
        {
            <div class="mt-5">
                <h4 class="text-center"><i class="fas fa-list"></i> Available Flights</h4>
                <div class="table-responsive">
                    <table class="table table-hover mt-3 shadow-sm">
                        <thead class="table-dark">
                            <tr>
                                <th>Flight ID</th>
                                <th>Departure</th>
                                <th>Arrival</th>
                                <th>Carrier</th>
                                <th>Price</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var flight in FlightResults)
                            {
                                @foreach (var itinerary in flight.Itineraries)
                                {
                                    <tr>
                                        <td>@flight.Id</td>
                                        <td>
                                            @foreach (var segment in itinerary.Segments)
                                            {
                                                <div>
                                                    <strong>@segment.Departure.IataCode</strong>
                                                    <br />
                                                    <small class="text-muted">@segment.Departure.At.ToString("MMM dd, HH:mm")</small>
                                                </div>
                                            }
                                        </td>
                                        <td>
                                            @foreach (var segment in itinerary.Segments)
                                            {
                                                <div>
                                                    <strong>@segment.Arrival.IataCode</strong>
                                                    <br />
                                                    <small class="text-muted">@segment.Arrival.At.ToString("MMM dd, HH:mm")</small>
                                                </div>
                                            }
                                        </td>
                                        <td>
                                            @foreach (var segment in itinerary.Segments)
                                            {
                                                <div>@segment.CarrierCode @segment.FlightNumber</div>
                                            }
                                        </td>
                                        <td><strong>@flight.Price.Currency @flight.Price.Total</strong></td>
                                        <td>
                                            <button @onclick="() => SelectPlaneOffer(itinerary.Segments.First().Departure.IataCode, itinerary.Segments.Last().Arrival.IataCode, itinerary.Segments.First().CarrierCode + itinerary.Segments.First().FlightNumber, flight.Price.Total)"
                                                    class="btn btn-sm btn-success">
                                                <i class="fas fa-check-circle"></i> Select
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>

                    </table>
                </div>
            </div>
        }
        else if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger text-center mt-4">
                <i class="fas fa-exclamation-triangle"></i> @ErrorMessage
            </div>
        }
    </div>
}

@code {
    // Fields to store flight search parameters and results
    private string Origin = "";
    private string Destination = "";
    private DateTime? DepartureDate = null;
    private List<Flight> FlightResults = new();
    private string ErrorMessage = "";
    private bool IsLoading = false;
    private string AccessToken = "";

    // Called automatically when the component is initialized
    // Retrieves the access token for Amadeus API
    protected override async Task OnInitializedAsync()
    {
        AccessToken = await AmadeusService.GetAccessTokenAsync();
    }

    // Fetches available flights based on search parameters
    private async Task FetchFlights()
    {
        IsLoading = true;
        ErrorMessage = "";
        FlightResults.Clear();
        Logger.LogInformation("klikket"); // Debug log

        try
        {
            if (DepartureDate.HasValue)
            {
                string departureDateString = DepartureDate.Value.ToString("yyyy-MM-dd");

                // Call to external service to search for flights
                var response = await AmadeusService.SearchFlightsAsync(Origin, Destination, departureDateString);
                Logger.LogInformation("JSON Response: {response}", response); // Log raw JSON response

                // Parse and extract "data" section from JSON response
                var jsonDocument = JsonDocument.Parse(response);
                var flightData = jsonDocument.RootElement.GetProperty("data").GetRawText();

                // Deserialize JSON to list of Flight objects
                FlightResults = JsonSerializer.Deserialize<List<Flight>>(flightData);
                Logger.LogInformation("Flights fetched successfully.");
            }
            else
            {
                ErrorMessage = "Please select a valid departure date.";
            }
        }
        catch (Exception ex)
        {
            // Handle and log any errors
            ErrorMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error fetching flights.");
        }
        finally
        {
            IsLoading = false; // Turn off loading state
        }
    }

    // Saves selected flight details to the database
    private async Task SaveFlightDetails(string departure, string arrival, string carrier, decimal price, DateTime startDate)
    {
        try
        {
            // Gather layover information from all flight segments
            var layovers = new List<string>();
            foreach (var flight in FlightResults)
            {
                foreach (var itinerary in flight.Itineraries)
                {
                    foreach (var segment in itinerary.Segments)
                    {
                        layovers.Add($"{segment.Departure.IataCode} → {segment.Arrival.IataCode}");
                    }
                }
            }

            // Create new Plane object and populate fields
            var plane = new Plane
                {
                    DepartureAirport = departure,
                    ArrivalAirport = arrival,
                    CarrierCode = carrier,
                    Price = price,
                    StartDate = startDate
                };

            // Save the flight to the database
            DbContext.Plane.Add(plane);
            await DbContext.SaveChangesAsync();

            Logger.LogInformation("Flight details saved successfully with layovers: {Layovers}", string.Join(", ", layovers));

            // Redirect user to the return flight selection page with flight details
            var departureEncoded = Uri.EscapeDataString(departure);
            var arrivalEncoded = Uri.EscapeDataString(arrival);
            var carrierEncoded = Uri.EscapeDataString(carrier);
            var startDateStr = startDate.ToString("yyyy-MM-dd");

            Navigation.NavigateTo($"/SalesReturnPlane?DepartureAirport={departureEncoded}&ArrivalAirport={arrivalEncoded}&Carrier={carrierEncoded}&FlightPrice={price}&StartDate={startDateStr}&PlaneId={plane.PlaneId}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving flight details.");
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    // Called when the user selects a flight offer
    private void SelectPlaneOffer(string departure, string arrival, string carrier, string price)
    {
        // Try to parse the price and proceed if valid
        if (decimal.TryParse(price, CultureInfo.InvariantCulture, out var parsedPrice))
        {
            if (DepartureDate.HasValue)
            {
                // Save flight info if departure date is set
                SaveFlightDetails(departure, arrival, carrier, parsedPrice, DepartureDate.Value);
            }
            else
            {
                ErrorMessage = "Please select a valid departure date.";
            }
        }
        else
        {
            ErrorMessage = "Invalid price format.";
        }
    }
}

